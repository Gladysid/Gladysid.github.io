{"meta":{"title":"小曦专谈","subtitle":"","description":"code can change the world","author":"Ms.Gladys","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-02-11T17:11:45.056Z","updated":"2020-02-11T17:11:45.056Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-02-11T17:11:29.547Z","updated":"2020-02-11T17:11:29.547Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-02-17T09:11:16.499Z","updated":"2020-02-17T09:11:16.499Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"npm ERR! code ELIFECYCLE","slug":"npm ERR! code ELIFECYCLE","date":"2020-05-28T02:32:47.274Z","updated":"2020-05-28T02:34:00.913Z","comments":true,"path":"2020/05/28/npm ERR! code ELIFECYCLE/","link":"","permalink":"http://yoursite.com/2020/05/28/npm%20ERR!%20code%20ELIFECYCLE/","excerpt":"","text":"npm install出现： 12345678910npm ERR! code ELIFECYCLEnpm ERR! errno 1npm ERR! node-sass@4.11.0 postinstall: `node scripts/build.js`npm ERR! Exit status 1npm ERR!npm ERR! Failed at the node-sass@4.11.0 postinstall script.npm ERR! This is probably not a problem with npm. There is likely additional logging output above.npm ERR! A complete log of this run can be found in:npm ERR! C:\\Users\\Gladys\\AppData\\Roaming\\npm-cache\\_logs\\2020-05-27T13_07_02_335Z-debug.log 原因：node_modules文件有改动，导致依赖库不完整 解决：删除项目下的node_modules，重新执行npm install就OK了","categories":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}],"tags":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}]},{"title":"如何使用fildder抓包","slug":"fildder catch bag","date":"2020-05-28T01:52:47.220Z","updated":"2020-05-28T02:28:33.807Z","comments":true,"path":"2020/05/28/fildder catch bag/","link":"","permalink":"http://yoursite.com/2020/05/28/fildder%20catch%20bag/","excerpt":"","text":"经过本人亲测的一篇文章，黄色底纹部分内容是在原创的基础上进行了补充或修改 一.Fiddler简介 Fiddler（中文名称：小提琴）是一个http协议调试代理工具，可以将网络传输发送与接受的数据包进行截获、重发、编辑、转存等操作。也可以用来检测网络安全。 二.Fiddler版本 Fiddler有Fiddler2和Fiddler4，两者区别在于，基于的framework不同，也就是系统支持不一样，功能原理都是一样的；电脑操作系统低于win7或是XP系统用Fiddler2就行，win7或win7以上版本，用Fiddler4 版本，建议都用Fiddler4版本； 下载地址：https://www.telerik.com/fiddler 三.Fiddler软件介绍 安装完成之后点击启动Fiddler，Fiddler界面见下： 1.Fiddler开关 界面左下角或点击F12控制Fiddler开关，开关是“Capturing”； 2.启动之后Fiddler代理永远是开着的； 3.浏览器代理设置 （1）IE或360浏览器代理都是自动开启的； 代理查看方式：浏览器菜单栏上：工具—&gt;Internet选项—&gt;连接—&gt;局域网设置—&gt;高级代理。 Fiddler开启之后，代理自动修改； （2）火狐浏览器 火狐浏览器启动之后，Fiddler没有反应，是因为火狐代理是自己独立的，不会像IE、360那样自动改变； 代理设置：——&gt;选项——&gt;高级——&gt;网络——&gt;连接——&gt;设置——&gt;手动配置代理——&gt;Http代理和端口输入（与Fiddler代理端口保持一致）； （3）谷歌浏览器代理设置 工具——&gt;设置——&gt;拖动页面到底部，点击：显示高级设置按钮——&gt;网络——&gt;更改代理服务器设置——&gt;点击：局域网设置——&gt;高级——&gt;进入代理服务器设置； 谷歌和IE都是用的系统代理。 4.Fiddler自己的端口： 查看方式：Tools——&gt;Options——&gt;Connections下的Fiddler listens on port:8888，8888就是我们Fiddler默认的端口号； Fiddler默认端口号是8888（文章中有图说明端口号是哪一个），如果要修改，修改之后要重启Fiddler。 5.Fiddler抓包格式 Fiddler只能抓取Http和https格式的，但是默认只能抓取http，想要抓取https我们的设置一下，步骤见下： Tools——&gt;Options——&gt;HTTPS下，勾选：Capture HTTPS CONNECTs、Decrypt HTTPS traffic 、ignore server certificate errors(unsafe)——&gt;点击OK，弹出证书之后直接确认就行。 补充:第一次操作会弹出证书，后面不会再弹出，之后需要证书的话，需要点击Actions中的Export Root Certificate to Desktop导出证书 6.Fiddler远程机制 Fiddler是代理机制，所以我们也可以实现远程操作，Fiddler默认只开启本地，若要抓取远程需要打开远程设置。 设置： Tools——&gt;Options——&gt;Connections——&gt;勾选Allow remote computers connect，此时就可以远程操作； 7.Fiddler远程实例 我直接用另一台电脑，远程捕获我自己电脑。 （1）另一台电脑相关设置 另一台电脑上安装Fiddler并启动，查询另一台电脑的IP，win+R——&gt;输入cmd，然后输入ipconfig，查看IP，在Fiddler上查看Fiddler端口号，并记录： Ip为：192.168.103.171，Fiddler端口号为：8888； （2）我的电脑相关设置 点击浏览器，以搜狐浏览器来说，修改代理 http代理为：另一个机子上的IP，端口值为Fiddler的端口 （3）结果 在我本地浏览器点击，另一个机子中Fiddler上捕获的数据界面见下： （4）说明 指定代理之后，无论Fiddler开关是关闭还是打开，数据都会传输过来，见上图。 本地远程其他机子，方法一致，就是讲要远程的机子代理改为本地电脑IP+Fiddler端口号即可。","categories":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}],"tags":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}]},{"title":"Vue项目中包含穿透的样式页面使用less","slug":"sw use less","date":"2020-05-28T01:52:30.966Z","updated":"2020-05-28T02:34:24.909Z","comments":true,"path":"2020/05/28/sw use less/","link":"","permalink":"http://yoursite.com/2020/05/28/sw%20use%20less/","excerpt":"","text":"1234567&lt;style scoped lang=\"less\"&gt;/* 页面样式 */&lt;/style&gt;&lt;style scoped&gt;/* 穿透样式*/&lt;/style&gt;","categories":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}],"tags":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}]},{"title":"如何在Vue项目中使用less","slug":"vue use less","date":"2020-05-28T01:50:30.215Z","updated":"2020-05-28T02:34:54.701Z","comments":true,"path":"2020/05/28/vue use less/","link":"","permalink":"http://yoursite.com/2020/05/28/vue%20use%20less/","excerpt":"","text":"第一步 npm 安装less1npm install less less-loader --save 第二步 修改webpack.base.conf.js修改位置：build文件夹—webpack.base.conf.js–module.export—moulde—rules,在rules里添加以下代码 1234&#123; test: /\\.less$/, loader: \"style-loader!css-loader!less-loader\",&#125; 第三步 使用less在style标签上添加lang属性，如下 12&lt;style scoped lang=\"less\"&gt;&lt;/style&gt;","categories":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}],"tags":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}]},{"title":"Vue页面内锚点跳转","slug":"Vue page a jump","date":"2020-03-13T21:05:47.438Z","updated":"2020-05-27T14:24:58.002Z","comments":true,"path":"2020/03/14/Vue page a jump/","link":"","permalink":"http://yoursite.com/2020/03/14/Vue%20page%20a%20jump/","excerpt":"","text":"问题在vue项目中，在导航栏内用href跳转页面，刷新后页面消失 刷新前： 刷新后： 解决html: 123&lt;ul&gt; &lt;li&gt;&lt;a @click=\"jump('#project')\"&gt;作品展现&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; js: 1234567methods: &#123;const downloadEle = document.querySelector('#nav')if (!!downloadEle) &#123;downloadEle.scrollIntoView(true) // true 是默认的&#125;document.querySelector('#project').scrollIntoView(true)&#125; 注： #nav为起点页面id，此处为导航栏id #project为终点页面id 效果图： url上不会出现页面id，刷新后页面不会消失","categories":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}],"tags":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}]},{"title":"built files are meant to be served over an HTTP server.   Opening index.html over file:// won't work","slug":"built files won't work","date":"2020-03-13T20:19:52.464Z","updated":"2020-05-27T13:34:36.354Z","comments":true,"path":"2020/03/14/built files won't work/","link":"","permalink":"http://yoursite.com/2020/03/14/built%20files%20won't%20work/","excerpt":"","text":"npm run build之后，出现提示：Tip: built files are meant to be served over an HTTP server. Opening index.html over file:// won‘t work. 打开dist文件夹里的index.html文件，页面无法显示，控制台报错如下： 解决1：将绝对路径改为相对路径修改目标文件：项目目录 &gt; config文件夹 &gt; index.js 1assetsPublicPath:&#39;&#x2F;&#39; 改为：assetsPublicPath:&#39;.&#x2F;&#39; 需要注意的是，不是修改dev下的assetsPublicPath，而是修改build下的assetsPublicPath 重新打包之后，运行dist里的index.html，页面能够显示了，但是背景图片却无法显示，控制台报错如下： 解决2：配置背景图片路径修改目标文件：项目目录 &gt; build文件夹 &gt;utils.js 1publicPath:&#39;..&#x2F;..&#x2F;&#39;, 再次npm run build，dist文件里的index.html即可正常运行","categories":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}],"tags":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}]},{"title":"你知道为什么JavaScript是弱类型语言吗?","slug":"Do you know why javaScript is weak language","date":"2020-02-27T06:20:17.678Z","updated":"2020-05-27T14:08:46.128Z","comments":true,"path":"2020/02/27/Do you know why javaScript is weak language/","link":"","permalink":"http://yoursite.com/2020/02/27/Do%20you%20know%20why%20javaScript%20is%20weak%20language/","excerpt":"","text":"在学习JavaScript的时候，说JavaScript是弱类型语言。那为什么JavaScript是弱类型语言呢。 但是在此之前我们需要了解一下弱类型语言，和强类型语言的区别。 强类型定义语言和弱类型定义语言 1）强类型定义语言： 强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。 2）弱类型定义语言： 数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。 强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。另外，“这门语言是不是动态语言”与“这门语言是否类型安全”之间是完全没有联系的！ 例如：Python是动态语言，是强类型定义语言（类型安全的语言）; VBScript是动态语言，是弱类型定义语言（类型不安全的语言）; JAVA是静态语言，是强类型定义语言（类型安全的语言）。 关于各种语言类型的解释，请参考：http://blog.csdn.net/aiming66/article/details/78570784#t3 了解了这些，我们在此说一下JavaScript为什么是弱类型语言。经过思考，我感觉通过一段代码来说明吧。可能这样更加直白。 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;js练习&lt;/title&gt; &lt;style type=\"text/css\"&gt; &lt;/style&gt; &lt;script type=\"text/javascript\"&gt; var num=0; alert(typeof num); num=\"123\"; alert(typeof num); num=true; alert(typeof num); num= new Date(); alert(typeof num); &lt;/script&gt; &lt;/head&gt;&lt;/html&gt; 其中，我来解释以下代码。下面的几句代码显示如下图，我们不能看出，我们在一开始只创建了一个变量num，为var类型，我们却可以给他赋值各种类型：数值类型，字符串，布尔类型，对象类型，为此我们可以推断出来，JavaScript为弱类型语言。 var num=0; alert(typeof num); num=”123”; alert(typeof num); num=true; alert(typeof num); num= new Date(); alert(typeof num); ———————————————— 版权声明：本文为CSDN博主「aiming66」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/aiming66/article/details/79482825","categories":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/categories/javaScript/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/tags/javaScript/"}]},{"title":"在Linux系统下安装MySQL","slug":"install mysql in linux system","date":"2020-02-27T06:07:22.241Z","updated":"2020-05-27T14:20:10.362Z","comments":true,"path":"2020/02/27/install mysql in linux system/","link":"","permalink":"http://yoursite.com/2020/02/27/install%20mysql%20in%20linux%20system/","excerpt":"","text":"安装前提：系统为CentOS 7.3 利用yum安装第一步：下载MySQL安装包 1wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm 第二步：将MySQL包添加到yum repository 1yum localinstall mysql57-community-release-el7-7.noarch.rpm 第三步：查看MySQL包是否成功添加到yum repository上 1yum repolist enabled | grep \"mysql.*-community.*\" 第四步：安装MySQL 1yum install -y mysql-community-server 第五步：启动MySQL服务 1service mysqld start 第六步：查看MySQL版本 1mysql --version 第七步：查看MySql的初始密码 1cat /var/log/mysqld.log | grep password","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"}]},{"title":"Vue项目打包后整体页面缩小的坑","slug":"page change small question","date":"2020-02-23T10:10:26.573Z","updated":"2020-05-27T14:21:30.271Z","comments":true,"path":"2020/02/23/page change small question/","link":"","permalink":"http://yoursite.com/2020/02/23/page%20change%20small%20question/","excerpt":"","text":"这两天发现一个特别奇怪的问题，做好的Vue项目打包后页面整体都缩小了，然后去度娘上搜索解决方案，但是上面都是页面放大或者防止页面缩小放大的解决方案，好不容易搜到有类似的标题，但是没有解决方案，百思不得其解，各种方法都试过了，都无济于事，不知道你们是否有遇到过这样的问题？ 后来，我想着将打包后的页面放大看看，结果一打开就发现问题所在了，打包后的页面是按100%来显示的，而打开的本地项目页面是按125%来显示的，原因是Window系统默认布局大小是按照125%来显示的，如下图所示，所以没有手动将页面缩放到正常的100%的时候，页面会默认按照125%显示。对于这块设置正常的小伙伴，还有可能的原因就是浏览器设置了页面缩放或者自己一开始不小心按了页面放大后来没有调回正常的100%，也会出现这样的问题，所以写代码的时候整体都设置小了。 解决方法就很简单了，把页面缩放到正常的100%，代码大小按比例调大即可 不希望别人走过和我同样的坑，所以写下了这篇文章，如果你也遇到这样的问题，希望能帮到你~","categories":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}],"tags":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}]},{"title":"css如何实现鼠标移至图片上显示遮罩层及文字","slug":"css how to show background and text in pic","date":"2020-02-20T16:26:29.112Z","updated":"2020-05-27T14:00:37.108Z","comments":true,"path":"2020/02/21/css how to show background and text in pic/","link":"","permalink":"http://yoursite.com/2020/02/21/css%20how%20to%20show%20background%20and%20text%20in%20pic/","excerpt":"","text":"搜索这个效果的时候，很多人都是用css结合jQuery实现的，其实直接用css也可以实现哦~ 效果前： 效果后： 代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;css如何实现鼠标移至图片上显示遮罩层及文字&lt;/title&gt; &lt;style type=\"text/css\"&gt; html, body &#123; width: 100%; height: 100%; margin: 0; padding: 0; &#125; .container &#123; display: flex; width: 100%; height: 100%; &#125; .imgbox &#123; position: relative; width: 220px; height: 200px; margin: auto; &#125; .imgbox img &#123; width: 220px; height: 200px; /* 转换速度 */ transition: transform 0.5s ease; &#125; .imgbox .mask &#123; position: absolute; top: 0; left: 0; width: 220px; height: 200px; background: rgba(44, 44, 44, 0.6); color: #ffffff; opacity: 0; display: flex; font-size: 13px; /* 转换速度 */ transition: transform 0.5s ease; &#125; .mask span &#123; margin: auto; &#125; .imgbox a:hover .mask &#123; opacity: 1; /* 增加元素的大小*/ -webkit-transform: scale(1.1, 1.1); /* Safari */ -ms-transform: scale(1.1, 1.1); /* IE 9 */ transform: scale(1.1, 1.1); &#125; .imgbox:hover img &#123; -webkit-transform: scale(1.1, 1.1); /* Safari */ -ms-transform: scale(1.1, 1.1); /* IE 9 */ transform: scale(1.1, 1.1); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;div class=\"imgbox\"&gt; &lt;img src=\"assets/project1.jpg\" /&gt; &lt;a href=\"https://blog.csdn.net/Gladys_Huang\"&gt; &lt;div class=\"mask\"&gt; &lt;span&gt;测试&lt;/span&gt; &lt;/div&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"BFC原理","slug":"BFC principle","date":"2020-02-20T15:17:30.369Z","updated":"2020-05-27T13:20:27.316Z","comments":true,"path":"2020/02/20/BFC principle/","link":"","permalink":"http://yoursite.com/2020/02/20/BFC%20principle/","excerpt":"","text":"一、常见定位方案在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案: 普通流 (normal flow) 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。 浮动 (float) 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。 绝对定位 (absolute positioning) 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。 二、BFC 概念Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。 那么 BFC 是什么呢？ BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。 具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。 通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。 三、触发 BFC只要元素满足下面任一条件即可触发 BFC 特性： body 根元素 浮动元素：float 除 none 以外的值 绝对定位元素：position (absolute、fixed) display 为 inline-block、table-cells、flex overflow 除了 visible 以外的值 (hidden、auto、scroll) 四、BFC 特性及应用1. 同一个 BFC 下外边距会发生折叠 css: 123456789101112131415&lt;head&gt;div&#123; width: 100px; height: 100px; background: lightblue; margin: 100px;&#125;&lt;/head&gt; html: 1234567&lt;body&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt; 从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px。 首先这不是 CSS 的 bug，我们可以理解为一种规范，如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。 html: 123456&lt;div class=\"container\"&gt; &lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class=\"container\"&gt; &lt;p&gt;&lt;/p&gt;&lt;/div&gt; css: 1234567891011121314151617.container &#123;overflow: hidden;&#125;p &#123;width: 100px;height: 100px;background: lightblue;margin: 100px;&#125; 这时候，两个盒子边距就变成了 200px 2. BFC 可以包含浮动的元素（清除浮动） 我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子 12345&lt;div style=\"border: 1px solid #000;\"&gt; &lt;div style=\"width: 100px;height: 100px;background: #eee;float: left;\"&gt;&lt;/div&gt;&lt;/div&gt; 由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。 12345&lt;div style=\"border: 1px solid #000;overflow: hidden\"&gt; &lt;div style=\"width: 100px;height: 100px;background: #eee;float: left;\"&gt;&lt;/div&gt;&lt;/div&gt; 效果如图： 3. BFC 可以阻止元素被浮动元素覆盖 先来看一个文字环绕效果： 12345&lt;div style=\"height: 100px;width: 100px;float: left;background: lightblue\"&gt;我是一个左浮动的元素&lt;/div&gt;&lt;div style=\"width: 200px; height: 200px;background: #eee\"&gt;我是一个没有设置浮动, 也没有触发 BFC 元素, width: 200px; height:200px; background: #eee;&lt;/div&gt; 这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden即可 这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"CSS水平居中+垂直居中+水平/垂直居中总结","slug":"center-summary","date":"2020-02-20T15:17:30.364Z","updated":"2020-05-27T13:55:05.561Z","comments":true,"path":"2020/02/20/center-summary/","link":"","permalink":"http://yoursite.com/2020/02/20/center-summary/","excerpt":"","text":"目录 水平居中 123456789行内元素块级元素 方案一：(分宽度定不定两种情况) 方案二：使用定位属性 方案三：使用flexbox布局实现（宽度定不定都可以） 垂直居中 12345678910单行的行内元素多行的行内元素块级元素 方案一：使用定位 方案二：使用flexbox布局实现（高度定不定都可以） 水平垂直居中 12345678已知高度和宽度的元素未知高度和宽度的元素 方案一：使用定位属性 方案二：使用flex布局实现 水平居中 行内元素 首先看它的父元素是不是块级元素，如果是，则直接给父元素设置 text-align: center; 123456789101112131415&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; text-align: center; &#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;span id=\"son\"&gt;我是行内元素&lt;/span&gt;&lt;/div&gt; 如果不是，则先将其父元素设置为块级元素，再给父元素设置 text-align: center; 1234567891011121314151617&lt;style&gt; #father &#123; display: block; width: 500px; height: 300px; background-color: skyblue; text-align: center; &#125;&lt;/style&gt; 123456&lt;span id&#x3D;&quot;father&quot;&gt; &lt;span id&#x3D;&quot;son&quot;&gt;我是行内元素&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; 效果： 块级元素 方案一：(分宽度定不定两种情况) 定宽度：需要谁居中，给其设置 margin: 0 auto; （作用：使盒子自己居中） 123456789101112131415161718192021222324252627&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; &#125; #son &#123; width: 100px; height: 100px; background-color: green; margin: 0 auto; &#125;&lt;/style&gt; 123456&lt;div id&#x3D;&quot;father&quot;&gt; &lt;div id&#x3D;&quot;son&quot;&gt;我是块级元素&lt;&#x2F;div&gt;&lt;&#x2F;div&gt; 效果： 不定宽度：默认子元素的宽度和父元素一样，这时需要设置子元素为display: inline-block; 或 display: inline;即将其转换成行内块级/行内元素，给父元素设置 text-align: center; 12345678910111213141516171819202122232425&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; text-align: center; &#125; #son &#123; background-color: green; display: inline; &#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;div id=\"son\"&gt;我是块级元素&lt;/div&gt;&lt;/div&gt; 效果：（将#son转换成行内元素，内容的高度撑起了#son的高度，设置高度无用） 方案二：使用定位属性 首先设置父元素为相对定位，再设置子元素为绝对定位，设置子元素的left:50%，即让子元素的左上角水平居中； 定宽度：设置绝对子元素的 margin-left: -元素宽度的一半px; 或者设置transform: translateX(-50%); 123456789101112131415161718192021222324252627282930313233&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; position: relative;&#125; #son &#123; width: 100px; height: 100px; background-color: green; position: absolute; left: 50%; margin-left: -50px;&#125;&lt;/style&gt; 12345&lt;div id&#x3D;&quot;father&quot;&gt; &lt;div id&#x3D;&quot;son&quot;&gt;我是块级元素&lt;&#x2F;div&gt;&lt;&#x2F;div&gt; 不定宽度：利用css3新增属性transform: translateX(-50%); 1234567891011121314151617181920212223242526272829&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; position: relative;&#125; #son &#123; height: 100px; background-color: green; position: absolute; left: 50%; transform: translateX(-50%);&#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;div id=\"son\"&gt;我是块级元素&lt;/div&gt;&lt;/div&gt; 效果： 方案三：使用flexbox布局实现（宽度定不定都可以） 使用flexbox布局，只需要给待处理的块状元素的父元素添加属性 display: flex; justify-content: center; 1234567891011121314151617181920212223242526272829&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; display: flex; justify-content: center; &#125; #son &#123; width: 100px; height: 100px; background-color: green; &#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;div id=\"son\"&gt;我是块级元素&lt;/div&gt;&lt;/div&gt; 效果： 垂直居中 单行的行内元素 只需要设置单行行内元素的”行高等于盒子的高”即可； 1234567891011121314151617181920212223&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; &#125; #son &#123; background-color: green; line-height: 300px; &#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;span id=\"son\"&gt;我是单行的行内元素&lt;/span&gt;&lt;/div&gt; 效果： 多行的行内元素 使用给父元素设置display:table-cell;和vertical-align: middle;属即可； 12345678910111213141516171819202122232425&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; display: table-cell; vertical-align:middle; &#125; #son &#123; background-color: green; &#125;&lt;/style&gt; 12345&lt;div id&#x3D;&quot;father&quot;&gt; &lt;span id&#x3D;&quot;son&quot;&gt;我是多行的行内元素我是多行的行内元素我是多行的行内元素我是多行的行内元素我是多行的行内元素我是多行的行内元素我是多行的行内元素我是多行的行内元素&lt;&#x2F;span&gt;&lt;&#x2F;div&gt; 效果： 块级元素 方案一：使用定位 首先设置父元素为相对定位，再设置子元素为绝对定位，设置子元素的top: 50%，即让子元素的左上角垂直居中； 定高度：设置绝对子元素的 margin-top: -元素高度的一半px; 或者设置transform: translateY(-50%); 12345678910111213141516171819202122232425262728293031&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; position: relative;&#125; #son &#123; height: 100px; background-color: green; position: absolute; top: 50%; margin-top: -50px;&#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;div id=\"son\"&gt;我是块级元素&lt;/div&gt;&lt;/div&gt; 不定高度：利用css3新增属性transform: translateY(-50%); 12345678910111213141516171819202122232425262728293031&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; position: relative;&#125; #son &#123; width: 100px; background-color: green; position: absolute; top: 50%; transform: translateY(-50%);&#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;div id=\"son\"&gt;我是块级元素&lt;/div&gt;&lt;/div&gt; 效果： 方案二：使用flexbox布局实现（高度定不定都可以） 使用flexbox布局，只需要给待处理的块状元素的父元素添加属性 display: flex; align-items: center; 1234567891011121314151617181920212223242526272829&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; display: flex; align-items: center; &#125; #son &#123; width: 100px; height: 100px; background-color: green; &#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;div id=\"son\"&gt;我是块级元素&lt;/div&gt;&lt;/div&gt; 效果： 水平垂直居中 已知高度和宽度的元素 方案一：设置父元素为相对定位，给子元素设置绝对定位，top: 0; right: 0; bottom: 0; left: 0; margin: auto; 123456789101112131415161718192021222324252627282930313233343536373839&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; position: relative;&#125; #son &#123; width: 100px; height: 100px; background-color: green; position: absolute; top: 0; right: 0; bottom: 0; left: 0; margin: auto;&#125;&lt;/style&gt; 12345&lt;div id&#x3D;&quot;father&quot;&gt; &lt;div id&#x3D;&quot;son&quot;&gt;我是块级元素&lt;&#x2F;div&gt;&lt;&#x2F;div&gt; 效果： 方案二：设置父元素为相对定位，给子元素设置绝对定位，left: 50%; top: 50%; margin-left: –元素宽度的一半px; margin-top: –元素高度的一半px; 12345678910111213141516171819202122232425262728293031323334353637&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; position: relative;&#125; #son &#123; width: 100px; height: 100px; background-color: green; position: absolute; left: 50%; top: 50%; margin-left: -50px; margin-top: -50px;&#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;div id=\"son\"&gt;我是块级元素&lt;/div&gt;&lt;/div&gt; 效果： 未知高度和宽度的元素 方案一：使用定位属性 设置父元素为相对定位，给子元素设置绝对定位，left: 50%; top: 50%; transform: translateX(-50%) translateY(-50%); 12345678910111213141516171819202122232425262728293031&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; position: relative;&#125; #son &#123; background-color: green; position: absolute; left: 50%; top: 50%; transform: translateX(-50%) translateY(-50%);&#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;div id=\"son\"&gt;我是块级元素&lt;/div&gt;&lt;/div&gt; 效果： 方案二：使用flex布局实现 设置父元素为flex定位，justify-content: center; align-items: center; 123456789101112131415161718192021222324252627&lt;style&gt; #father &#123; width: 500px; height: 300px; background-color: skyblue; display: flex; justify-content: center; align-items: center;&#125; #son &#123; background-color: green;&#125;&lt;/style&gt; 12345&lt;div id=\"father\"&gt; &lt;div id=\"son\"&gt;我是块级元素&lt;/div&gt;&lt;/div&gt; 效果： PS：已修改原创中部分错误代码 垂直居中-单行的行内元素-#son 的样式（height:300px改为line-height:300px） 垂直居中-块级元素-方案一-不定高度-#son 的样式(left:50%改为top:50%) 版权声明：本文为CSDN博主「杜媛媛」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/weixin_37580235/article/details/82317240","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"使用css3制作一个简易的环形进度条","slug":"use css3 to make a simple progress bar","date":"2020-02-18T09:46:55.157Z","updated":"2020-05-27T14:23:27.121Z","comments":true,"path":"2020/02/18/use css3 to make a simple progress bar/","link":"","permalink":"http://yoursite.com/2020/02/18/use%20css3%20to%20make%20a%20simple%20progress%20bar/","excerpt":"","text":"css： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384section &#123; width: 2rem; height: 2rem; position: relative; margin: 2rem; &#125; .wrap, .circle, .percent &#123; position: absolute; width: 2rem; height: 2rem; border-radius: 50%; &#125; .wrap &#123; top: 0; left: 0; background: #ccc; &#125; .circle &#123; box-sizing: border-box; -webkit-box-sizing: border-box; -ms-box-sizing: border-box; -moz-box-sizing: border-box; -o-box-sizing: border-box; border: 1px solid #ccc; clip: rect(0, 2rem, 2rem, 1rem); /* 把圆剪切为只有右边的灰色半圆 */ &#125; .clip-auto &#123; clip: rect(auto, auto, auto, auto); &#125; .percent &#123; box-sizing: border-box; -webkit-box-sizing: border-box; -ms-box-sizing: border-box; -moz-box-sizing: border-box; -o-box-sizing: border-box; top: -1px; left: -1px; &#125; .left &#123; border: 0.1rem solid #ff6300; clip: rect(0, 1rem, 2rem, 0); /* 把圆剪切为只有左边的橙色半圆，因为left圆是circle圆的子圆， 所以circle圆剪切为只有右边的半圆时，left圆无法显示 */ &#125; .right &#123; border: 0.1rem solid #FF6300; clip: rect(0, 2rem, 2rem, 1rem); /* 把圆剪切为只有右边的橙色半圆 */ &#125; .wth0 &#123; width: 0; &#125; .num &#123; position: absolute; box-sizing: border-box; -webkit-box-sizing: border-box; -ms-box-sizing: border-box; -moz-box-sizing: border-box; -o-box-sizing: border-box; width: 1.8rem; height: 1.8rem; line-height: 1.8rem; text-align: center; font-size: 0.5rem; left: 0.1rem; top: 0.1rem; border-radius: 50%; color: #FF6300; background: white; z-index: 1; &#125; html: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;!--进度0%--&gt; &lt;section&gt; &lt;div class=\"wrap\"&gt; &lt;!--大于180，则class=clip-auto circle，否则：circle--&gt; &lt;div class=\"circle\"&gt; &lt;!--度数为：当前进度*3.6--&gt; &lt;div class=\"percent left\" style= \"-webkit-transform:rotate(0deg);\"&gt;&lt;/div&gt; &lt;!--大于180，则class=percent right，否则为percent right wth0--&gt; &lt;div class='percent right wth0'&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"num\"&gt; &lt;span&gt;0&lt;/span&gt;% &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!--进度30%--&gt; &lt;section&gt; &lt;div class=\"wrap\"&gt; &lt;!--大于180，则class=clip-auto circle，否则：circle--&gt; &lt;div class=\"circle\"&gt; &lt;!--度数为：当前进度*3.6--&gt; &lt;div class=\"percent left\" style=\"-webkit-transform:rotate(108deg);\"&gt;&lt;/div&gt; &lt;!--大于180，则class=percent right，否则为percent right wth0--&gt; &lt;div class='percent right wth0'&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"num\"&gt; &lt;span&gt;30&lt;/span&gt;% &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!--进度50%--&gt; &lt;section&gt; &lt;div class=\"wrap\"&gt; &lt;!--大于180，则class=clip-auto circle，否则：circle--&gt; &lt;div class=\"clip-auto circle\"&gt; &lt;!--度数为：当前进度*3.6--&gt; &lt;div class=\"percent left\" style=\"-webkit-transform:rotate(180deg);\"&gt;&lt;/div&gt; &lt;!--大于180，则class=percent right，否则为percent right wth0--&gt; &lt;div class='percent right'&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"num\"&gt; &lt;span&gt;50&lt;/span&gt;% &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!--进度70%--&gt; &lt;section&gt; &lt;div class=\"wrap\"&gt; &lt;!--大于180，则class=clip-auto circle，否则：circle--&gt; &lt;div class=\"clip-auto circle\"&gt; &lt;!--度数为：当前进度*3.6--&gt; &lt;div class=\"percent left\" style=\"-webkit-transform:rotate(252deg);\"&gt;&lt;/div&gt; &lt;!--大于180，则class=percent right，否则为percent right wth0--&gt; &lt;div class='percent right'&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"num\"&gt; &lt;span&gt;70&lt;/span&gt;% &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!--进度100%--&gt; &lt;section&gt; &lt;div class=\"wrap\"&gt; &lt;!--大于180，则class=clip-auto circle，否则：circle--&gt; &lt;div class=\"clip-auto circle\"&gt; &lt;!--度数为：当前进度*3.6--&gt; &lt;div class=\"percent left\" style=\"-webkit-transform:rotate(360deg);\"&gt;&lt;/div&gt; &lt;!--大于180，则class=percent right，否则为percent right wth0--&gt; &lt;div class='percent right'&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"num\"&gt; &lt;span&gt;100&lt;/span&gt;% &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; javaScript: 12345678910111213// 自动设置font-zise (function (doc, win) &#123; var docEl = doc.documentElement, resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize', recalc = function () &#123; var clientWidth = docEl.clientWidth; if (!clientWidth) return; docEl.style.fontSize = parseInt(20 * (clientWidth / 320)) + 'px'; &#125;; if (!doc.addEventListener) return; win.addEventListener(resizeEvt, recalc, false); doc.addEventListener('DOMContentLoaded', recalc, false); &#125;)(document, window); 结果： ———————————————— 版权声明：本文为CSDN博主「帆酱」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/weixin_41187842/article/details/80525157","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"如何利用github在.md文件中添加图片","slug":"How to show the pic in md file","date":"2020-02-17T08:36:55.246Z","updated":"2020-05-27T14:13:14.385Z","comments":true,"path":"2020/02/17/How to show the pic in md file/","link":"","permalink":"http://yoursite.com/2020/02/17/How%20to%20show%20the%20pic%20in%20md%20file/","excerpt":"","text":"1、在github上的仓库建立一个存放图片的库，库的名字随意。如：Images-blog 2、将需要在.md文件中显示的图片，push到Images-blog库中 3、然后打开github官网，进入仓库的Images-blog文件夹中，打开图片 点击红框所示的按钮，copy地址 4、在.md文件中填入： 1![Image](https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Gladysid&#x2F;Images-blog&#x2F;master&#x2F;IE-box-pic.png) 注：![Image]这个标识不可缺少，不然就显示文字了 5、如果你的github上的图片不显示 解决办法：打开路径C:\\Windows\\System32\\drivers\\etc下的hosts文件 在最后加上 12345678910111213141516171819# GitHub Start 192.30.253.112 github.com 192.30.253.119 gist.github.com151.101.184.133 assets-cdn.github.com151.101.184.133 raw.githubusercontent.com151.101.184.133 gist.githubusercontent.com151.101.184.133 cloud.githubusercontent.com151.101.184.133 camo.githubusercontent.com151.101.184.133 avatars0.githubusercontent.com151.101.184.133 avatars1.githubusercontent.com151.101.184.133 avatars2.githubusercontent.com151.101.184.133 avatars3.githubusercontent.com151.101.184.133 avatars4.githubusercontent.com151.101.184.133 avatars5.githubusercontent.com151.101.184.133 avatars6.githubusercontent.com151.101.184.133 avatars7.githubusercontent.com151.101.184.133 avatars8.githubusercontent.com # GitHub End 如果没有权限，自己重新创建一个hosts文件，把内容复制进去，再复制粘贴整个文件就OK了~","categories":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}],"tags":[{"name":"项目问题集合","slug":"项目问题集合","permalink":"http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"}]},{"title":"px、em、rem的区别","slug":"distinguish of px em rem","date":"2020-02-12T11:30:28.753Z","updated":"2020-02-17T09:04:25.907Z","comments":true,"path":"2020/02/12/distinguish of px em rem/","link":"","permalink":"http://yoursite.com/2020/02/12/distinguish%20of%20px%20em%20rem/","excerpt":"","text":"pxpx是英文pixel的缩写，意思是像素，为相对长度单位。像素px是相对于显示器屏幕分辨率而言的。 特点 IE无法调整那些使用px作为单位的字体大小； 国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位； Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。 emem是相对长度单位，相对于父级元素的字体大小，所以em的值不是固定的。如当前对行内文本的字体尺寸未被设置，则相对于浏览器的默认字体尺寸。 任意浏览器的默认字体为16px,以默认字体为例： 123&lt;div&gt; &lt;p style&#x3D;&quot;font-size:2em&quot;&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt; 因为默认字体是16px,所以div的字体大小是16px，div标签是p标签的父元素，所以p标签的字体大小为216px*ps：*未经调整的浏览器都符合1em=16px，为了简化font-size的换算，可以在body选择器中声明font-size为62.5%，这样1em=160.625px=10px，换算起来就非常方便，比如12px=1.2em remrem是CSS3中新增的一个相对长度单位，r为root（根）的简写，所以rem是HTML根元素的字体大小 如html根元素的字体大小为16px，div的字体大小设置为2rem，则div的字体大小为2*16px 目前，大部分浏览器（除了ie8以下的浏览器）都支持rem，对于不支持rem的浏览器，可以采取以下应对方法，以根元素大小为16px为例： 1p&#123;font-size:14px;font-size:0.875rem;&#125; 如何选择？选择的字体单位由你的项目决定 如果你的用户群都使用最新版的浏览器或者需要适配各种移动设备，推荐使用rem，em计算不方便，比较少用； 如果要考虑兼容性或者只需要适配少部分手机设备且分辨率对页面影响不大的，使用px即可","categories":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/categories/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"W3C标准盒模型与IE盒模型区别","slug":"distinguish of W3C box and IE box","date":"2020-02-12T11:29:35.923Z","updated":"2020-05-27T14:04:56.593Z","comments":true,"path":"2020/02/12/distinguish of W3C box and IE box/","link":"","permalink":"http://yoursite.com/2020/02/12/distinguish%20of%20W3C%20box%20and%20IE%20box/","excerpt":"","text":"不难看出，两个盒子模型都有content，padding,border,margin,唯一的区别就是对元素尺寸的计算方式，标准盒子模型的盒子宽度=content+padding+border,而IE盒子模型的盒子宽度=content 为了避免盒子被撑开，CCS3中增加了一种能够更改盒子的属性：box-sizing,它有两个属性值， （1）content-box:对应W3C盒模型 （2）border-box:对应IE盒模型","categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"如何理解重载？","slug":"reload","date":"2020-02-08T08:04:12.586Z","updated":"2020-02-17T09:06:55.039Z","comments":true,"path":"2020/02/08/reload/","link":"","permalink":"http://yoursite.com/2020/02/08/reload/","excerpt":"","text":"js中函数没有重载 什么叫重载？ 重载即一个函数能编写两个定义（即相同的函数名），只要这两个定义的签名（接受的参数的类型和数量）不同即可 JS中如果出现两个相同名字的函数，后面定义的函数直接覆盖前面定义的函数 例： 12345678910111213function addSomeNumber(num)&#123;return num + 100;&#125;function addSomeNumber(num)&#123;return num + 200;&#125;var result = addSomeNumber(100); //300","categories":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/categories/javaScript/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/tags/javaScript/"}]},{"title":"如何理解操作对象实际上是操作对象的引用？","slug":"object","date":"2020-02-05T16:12:45.972Z","updated":"2020-02-17T09:06:33.403Z","comments":true,"path":"2020/02/06/object/","link":"","permalink":"http://yoursite.com/2020/02/06/object/","excerpt":"","text":"JS中的变量是保存在栈内存中的 而对象是保存在堆内存中的，每个对象在堆内存中都占有自己的空间 js中我们不能直接操作堆内存，由变量保存对象的内存地址，即对象的引用，然后通过变量才能找到对象，好比如找一个地方，地方那么多，世界那么大，而我们不能直接就到达那个地方，需要通过地址去找到一样 例： 12var person = new Object() person.name = \"John\" //操作对象时只能用变量，而不能直接用对象","categories":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/categories/javaScript/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/tags/javaScript/"}]},{"title":"常用浏览器以及内核","slug":"browser","date":"2020-02-05T08:47:24.142Z","updated":"2020-02-11T17:13:40.789Z","comments":true,"path":"2020/02/05/browser/","link":"","permalink":"http://yoursite.com/2020/02/05/browser/","excerpt":"","text":"常用浏览器浏览器是网页显示以及运行的平台 常用的浏览器有chrome、IE、Safari、Opera、Firefox，称为五大国外浏览器，微软为了取代陈旧的IE浏览器，随着window10推出了Edge浏览器。 浏览器内核浏览器内核也称为渲染引擎，负责读取网页内容，内核也叫渲染引擎，负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。简单来说就是读取并显示网页内容。 浏览器 内核 备注 IE Trident IE、猎豹安全、360极速浏览器、百度浏览器 firefox Gecko 火狐浏览器内核 Safari Webkit 苹果浏览器内核 Chrome/Opera Blint chrome/opera浏览器内核。Blink是Webkit的分支 目前国内一般浏览器采用Webkit/Blint内核，如360、UC、QQ搜狗等","categories":[{"name":"浏览器","slug":"浏览器","permalink":"http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"}],"tags":[{"name":"浏览器","slug":"浏览器","permalink":"http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"}]},{"title":"H5 video标签的使用","slug":"How to use the vedieo of H5","date":"2019-10-01T16:00:00.000Z","updated":"2020-05-27T14:13:59.299Z","comments":true,"path":"2019/10/02/How to use the vedieo of H5/","link":"","permalink":"http://yoursite.com/2019/10/02/How%20to%20use%20the%20vedieo%20of%20H5/","excerpt":"","text":"1, 下面是一个播放视频的最简单样例 （controls属性告诉浏览器要有基本播放控件） 1&lt;video src=\"hangge.mp4\" controls&gt;&lt;/video&gt; 2，通过width和height设置视频窗口大小 1&lt;video src=\"hangge.mp4\" controls width=\"400\" height=\"300\"&gt;&lt;/video&gt; 3，预加载媒体文件 设置preload不同的属性值，可以告诉浏览器应该怎样加载一个媒体文件： （1）值为auto：让浏览器自动下载整个文件 （2）值为none：让浏览器不必预先下载文件 （3）值为metadata：让浏览器先获取视频文件开头的数据块，从而足以确定一些基本信息（比如视频的总时长，第一帧图像等） 123&lt;!-- 用户点击播放才开始下载 --&gt;&lt;video src=\"hangge.mp4\" controls preload=\"none\"&gt;&lt;/video&gt; 4，自动播放 （1）使用autoplay属性可以让浏览器加载完视频文件后立即播放。 1&lt;video src=\"hangge.mp4\" controls autoplay&gt;&lt;/video&gt; （2）如果启用自动播放，可以将播放器设置为muted状态。这样自动播放时会静音，防止用户厌烦。用户需要的话可以点击播放器扬声器图标重新打开声音。 1&lt;video src=\"hangge.mp4\" controls autoplay muted&gt;&lt;/video&gt; 5，循环播放 使用loop属性让视频播放结束时，再从头开始播放。 1&lt;video src=\"hangge.mp4\" controls loop&gt;&lt;/video&gt; 6，设置替换视频的图片（封面图片） 通过poster属性可以设置，浏览器在下面三种情况下会使用这个图片： （1）视频第一帧未加载完毕 （2）把preload属性设置为none （3）没有找到指定的视频文件 1&lt;video src=\"hangge.mp4\" controls poster=\"hangge.png\"&gt;&lt;/video&gt; 7，浏览器兼容，如何让每一个浏览器都能顺利播放视频 现在大部分浏览器都能支持H.264格式的视频，但Opera浏览器却一直不支持。我们需要通过后备措施保证每个人都能看到视频，通常有下面几种方案： （1）使用多种视频格式 &lt;video&gt;和&lt;audio&gt;元素有个内置的格式后备系统。我们不使用src属性，而是在其内部嵌套一组&lt;source&gt;元素，浏览器会选择播放第一个它所支持的文件。 我们可以添加WebM格式的视频提供对Opera的支持。 1234567&lt;video controls&gt;&lt;source src=\"hangge.mp4\" type=\"video/mp4\"&gt;&lt;source src=\"hangge.webm\" type=\"video/webm\"&gt;&lt;/video&gt; （2）添加Flash后备措施（推荐） 上面那个方法不推荐，应为Opera浏览器只占不到1%的份额。特意为它把视频都转码一边太费事。使用Flash作为备用播放方案还是很方便的，同时Flash还能兼容IE8这种连&lt;video&gt;元素都不支持的老浏览器。 这里使用Flowplayer Flash作为备用播放器（本地下载 ：flowplayer-3.2.18.zip） 12345678910111213141516171819&lt;video controls&gt;&lt;source src=\"hangge.mp4\" type=\"video/mp4\"&gt;&lt;source src=\"hangge.webm\" type=\"video/webm\"&gt;&lt;object id=\"flowplayer\" width=\"400\" height=\"300\"data=\"flowplayer-3.2.18.swf\"type=\"application/x-shockwave-flash\"&gt;&lt;param name=\"movie\" value=\"flowplayer-3.2.18.swf\"&gt;&lt;param name=\"flashvars\" value='config=&#123;\"clip\":\"hangge.mp4\"&#125;'&gt;&lt;/object&gt;&lt;/video&gt; （3）也有人优先使用Flash，而HTML5作为后备措施。 这么做是因为Flash普及率比较高，而HTML5作为后备可以扩展iPad和iPhone用户 12345678910111213141516171819&lt;object id=\"flowplayer\" width=\"400\" height=\"300\" data=\"flowplayer-3.2.18.swf\"type=\"application/x-shockwave-flash\"&gt; &lt;param name=\"movie\" value=\"flowplayer-3.2.18.swf\"&gt; &lt;param name=\"flashvars\" value='config=&#123;\"clip\":\"hangge.mp4\"&#125;'&gt; &lt;video controls&gt; &lt;source src=\"hangge.mp4\" type=\"video/mp4\"&gt; &lt;source src=\"hangge.webm\" type=\"video/webm\"&gt; &lt;/video&gt;&lt;/object&gt;","categories":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/categories/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]}]}